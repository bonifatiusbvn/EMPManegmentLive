@model IEnumerable<EMPManegment.EntityModels.ViewModels.Chat.ChatMessagesView>
@inject EMPManegment.Web.Helper.Common CommonHelper
@using EMPManegment.Web.Models;
@inject IHttpContextAccessor Accessor;
@inject UserSession _userSession
@{
    var conversationId = Guid.Empty;
    var secondUserImage = string.Empty;
    var secondUserName = string.Empty;
    var secondUserId = Guid.Empty;
    var secondMessageId = 0;

    var firstMessage = Model.FirstOrDefault();
    if (firstMessage != null)
    {
        conversationId = firstMessage.ConversationId ?? Guid.Empty;
    }

    var lastMessageFromSecondUser = Model
        .Where(m => m.UserId != _userSession.UserId)
        .OrderByDescending(m => m.SentDateTime)
        .FirstOrDefault();

    if (lastMessageFromSecondUser != null)
    {
        secondUserId = lastMessageFromSecondUser.UserId;
        secondUserImage = lastMessageFromSecondUser.UserImage;
        secondUserName = lastMessageFromSecondUser.UserName;
        secondMessageId = lastMessageFromSecondUser.MessageId;
    }
    var secondUserimageUrl = !string.IsNullOrEmpty(@secondUserImage) ? Url.Content($"~/{@secondUserImage}") : null;
    var secondUserinitials = (!string.IsNullOrEmpty(@secondUserName)) ? $"{@secondUserName[0]}".ToUpper() : null;
}

<style>
    .chat-conversation-details {
        height: 620px;
        overflow: scroll;
    }

</style>

<input type="hidden" id="txtChatUserId" value="@_userSession.UserId" />
<input type="hidden" id="txtChatUserName" value="@_userSession.UserName" />
<div class="position-relative" id="users-chat">
    <div class="p-3 user-chat-topbar border-bottom border-bottom-dashed">
        <div class="row align-items-center">
            <div class="col-sm-4 col-8">
                <div class="d-flex align-items-center">
                    <div class="flex-shrink-0 d-block d-lg-none me-3">
                        <a href="javascript: void(0);" class="user-chat-remove fs-18 p-1"><i class="ri-arrow-left-s-line align-bottom"></i></a>
                    </div>
                    <div class="flex-grow-1 overflow-hidden">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0 chat-user-img online user-own-img align-self-center me-3 ms-0">
                                @if (!string.IsNullOrEmpty(secondUserimageUrl))
                                {
                                    <img src="~/@secondUserImage" class="rounded-circle avatar-xs" alt="" style="height:35px;width:35px;">
                                }
                                else
                                {
                                    <div class="flex-shrink-0 avatar-xs me-2">
                                        <div class="avatar-title bg-success-subtle text-success rounded-circle fs-15" style="height:35px;width:35px;">@secondUserinitials</div>
                                    </div>
                                }
                                <span class="user-status"></span>
                            </div>
                            <div class="flex-grow-1 overflow-hidden">
                                <h5 class="text-truncate mb-0 fs-16">
                                    <a class="text-reset username" data-bs-toggle="offcanvas" onclick="fn_GetChatUserInformation('@secondUserId')" href="#userProfileCanvasExample" aria-controls="userProfileCanvasExample">@secondUserName</a>
                                </h5>
                                <p class="text-truncate text-muted fs-14 mb-0 userStatus"><small>Online</small></p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-8 col-4">
                <ul class="list-inline user-chat-nav text-end mb-0">
                    <li class="list-inline-item m-0">
                        <div class="dropdown">
                            <button class="btn btn-ghost-secondary btn-icon" type="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search icon-sm">
                                    <circle cx="11" cy="11" r="8"></circle>
                                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                                </svg>
                            </button>
                            <div class="dropdown-menu p-0 dropdown-menu-end dropdown-menu-lg">
                                <div class="p-2">
                                    <div class="search-box">
                                        <input type="text" class="form-control bg-light border-light" placeholder="Search here..." onkeyup="searchChatMessages()" id="searchChatMessage">
                                        <i class="ri-search-2-line search-icon"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </li>
                    <li class="list-inline-item d-lg-inline-block m-0">
                        <button type="button" class="btn btn-ghost-secondary btn-icon" data-bs-toggle="offcanvas" onclick="fn_GetChatUserInformation('@secondUserId')" href="#userProfileCanvasExample" aria-controls="userProfileCanvasExample">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-info icon-sm">
                                <circle cx="12" cy="12" r="10"></circle>
                                <line x1="12" y1="16" x2="12" y2="12"></line>
                                <line x1="12" y1="8" x2="12.01" y2="8"></line>
                            </svg>
                        </button>
                    </li>
                    <li class="list-inline-item m-0">
                        <div class="dropdown">
                            <button class="btn btn-ghost-secondary btn-icon" type="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-more-vertical icon-sm">
                                    <circle cx="12" cy="12" r="1"></circle>
                                    <circle cx="12" cy="5" r="1"></circle>
                                    <circle cx="12" cy="19" r="1"></circle>
                                </svg>
                            </button>
                            <div class="dropdown-menu dropdown-menu-end">
                                <a class="dropdown-item d-block d-lg-none user-profile-show" href="#"><i class="ri-user-2-fill align-bottom text-muted me-2"></i> View Profile</a>
                                <a class="dropdown-item" href="#"><i class="ri-inbox-archive-line align-bottom text-muted me-2"></i> Archive</a>
                                <a class="dropdown-item" href="#"><i class="ri-mic-off-line align-bottom text-muted me-2"></i> Muted</a>
                                <a class="dropdown-item" href="#"><i class="ri-delete-bin-5-line align-bottom text-muted me-2"></i> Delete</a>
                            </div>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <!-- Other header elements -->
</div>
<!-- end chat user head -->
@{
    var groupedMessages = Model.GroupBy(m => m.SentDateTime.HasValue ? m.SentDateTime.Value.Date : DateTime.MinValue).OrderBy(g => g.Key);
}

<div class="chat-conversation p-3 p-lg-4" id="chat-conversation" data-simplebar>
    <div>
        <div id="users-chat">
            <div class="chat-conversation-details p-3" id="chat-conversation-details" data-simplebar>
                <ul class="list-unstyled chat-conversation-list chat-sm" id="users-conversation">
                    @foreach (var group in groupedMessages)
                    {
                        <li class="chat-date-separator text-center">
                            <small class="badge bg-primary-subtle text-muted" style="margin-left:580px;">
                                @{
                                    if (group.Key.Date == DateTime.Today)
                                    {
                                        @:Today
                                    }
                                    else if (group.Key.Date == DateTime.Today.AddDays(-1))
                                    {
                                        @:Yesterday
                                    }
                                    else
                                    {
                                        @group.Key.ToString("dddd, dd MMM")
                                    }
                                }
                            </small>
                        </li>
                        <br />
                        @foreach (var item in group)
                        {
                            var imageUrl = !string.IsNullOrEmpty(@item.UserImage) ? Url.Content($"~/{@item.UserImage}") : null;
                            var initials = (!string.IsNullOrEmpty(@item.UserName)) ? $"{@item.UserName[0]}".ToUpper() : null;
                            <li class="chat-list @(item.UserId == _userSession.UserId ? "right" : "left")">
                                <div class="conversation-list">
                                    <div class="chat-avatar">
                                        @if (!string.IsNullOrEmpty(imageUrl))
                                        {
                                            <img src="~/@item.UserImage" alt="">
                                        }
                                        else
                                        {
                                            <div class="flex-shrink-0 avatar-xs me-2">
                                                <div class="avatar-title bg-success-subtle text-success rounded-circle fs-13" style="height:30px;width:30px;">@initials</div>
                                            </div>
                                        }
                                    </div>
                                    <div class="user-chat-content">
                                        <div class="ctext-wrap">
                                            <div class="ctext-wrap-content">
                                                <p class="mb-0 ctext-content">@item.MessageText</p>
                                            </div>
                                            <div class="dropdown align-self-start message-box-drop">
                                                <a class="dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                    <i class="ri-more-2-fill"></i>
                                                </a>
                                                <div class="dropdown-menu">
                                                    <a class="dropdown-item" href="#"><i class="ri-reply-line me-2 text-muted align-bottom"></i>Reply</a>
                                                    <a class="dropdown-item" href="#"><i class="ri-file-copy-line me-2 text-muted align-bottom"></i>Copy</a>
                                                    <a class="dropdown-item delete-item" href="#"><i class="ri-delete-bin-5-line me-2 text-muted align-bottom"></i>Delete</a>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="conversation-name">
                                            <small class="text-muted time">@(item.SentDateTime.HasValue ? item.SentDateTime.Value.ToString("hh:mm tt") : "")</small>
                                            @if (item.IsRead == true)
                                            {
                                                <span class="text-success check-message-icon">
                                                    <i class="ri-check-double-line align-bottom"></i>
                                                </span>
                                            }
                                        </div>
                                    </div>
                                </div>
                                <input type="hidden" id="txtChatConversationId" value="@item.ConversationId" hidden />
                            </li>
                        }
                    }
                </ul>

            </div>
        </div>
    </div>
</div>

<div class="alert alert-warning alert-dismissible copyclipboard-alert px-4 fade show " id="copyClipBoard" role="alert">
    Message copied
</div>


<div class="replyCard">
    <div class="card mb-0">
        <div class="card-body py-3">
            <div class="replymessage-block mb-0 d-flex align-items-start">
                <div class="flex-grow-1">
                    <h5 class="conversation-name"></h5>
                    <p class="mb-0"></p>
                </div>
                <div class="flex-shrink-0">
                    <button type="button" id="close_toggle" class="btn btn-sm btn-link mt-n2 me-n3 fs-18">
                        <i class="bx bx-x align-middle"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var connection = new signalR.HubConnectionBuilder()
        .withUrl("http://192.168.0.126/chat")
        .build();

    connection.start().catch(function (err) {
        return console.error(err.toString());
    });

    document.getElementById("sendmessage").addEventListener("click", function (event) {
        debugger
        event.preventDefault();

        var userId = document.getElementById("txtChatUserId").value;
        var userName = document.getElementById("txtChatUserName").value;
        var message = document.getElementById("txtChatMessage").value;
        var conversationId = document.getElementById("txtChatConversationId").value;
        debugger
        if (message.trim() === "") {
            return;
        }

        connection.invoke("SendMessageToUser", userId, userName, message, conversationId).catch(function (err) {
            return console.error(err.toString());
        });

        document.getElementById("txtChatMessage").value = "";
    });
    
    connection.on("ReceiveMessage", function (userName, message, conversationId) {
        var conversationList = document.getElementById("users-conversation");

        var li = document.createElement("li");
        li.className = "chat-list right";
        li.innerHTML = `
        <div class="conversation-list">
            <div class="chat-avatar">
        <div class="avatar-title bg-success-subtle text-success rounded-circle fs-13" style="height:30px;width:30px;">
        ${userName.charAt(0).toUpperCase()}
        </div>
        </div>
        <div class="user-chat-content">
        <div class="ctext-wrap">
        <div class="ctext-wrap-content">
        <p class="mb-0 ctext-content">${message}</p>
        </div>
        </div>
        <div class="conversation-name">
        <small class="text-muted time">${new Date().toLocaleTimeString()}</small>
        </div>
        </div>
        </div>`;


        conversationList.appendChild(li);
        conversationList.scrollTop = conversationList.scrollHeight;
    });
</script>


